 #!/bin/bash

actualizar_script(){
archivo_local="InformacionDispositivosDeRed" # Nombre del archivo local
ruta_repositorio="https://github.com/sukigsx/MegaTools_gui.git" #ruta del repositorio para actualizar y clonar con git clone

# Obtener la ruta del script
descarga=$(dirname "$(readlink -f "$0")")
#descarga="/home/$(whoami)/scripts"
git clone $ruta_repositorio /tmp/comprobar >/dev/null 2>&1

diff $descarga/$archivo_local /tmp/comprobar/$archivo_local >/dev/null 2>&1


if [ $? = 0 ]
then
    #esta actualizado, solo lo comprueba
    #echo ""
    #echo -e "${verde} El script${borra_colores} $0 ${verde}esta actualizado.${borra_colores}"
    #echo ""
    var_actualizado="SI"
    chmod -R +w /tmp/comprobar
    rm -R /tmp/comprobar
else
    #hay que actualizar, comprueba y actualiza
    #echo ""
    zenity --warning --title="Megatools - ( Diseñado por SIKIGSX )" --text="Se va a proceder a la actualizacion del componente $0 de forma automatica.\nCarga de nuevo $0." --width=650
    mv /tmp/comprobar/$archivo_local $descarga
    chmod -R +w /tmp/comprobar
    rm -R /tmp/comprobar
    #echo ""
    #echo -e "${verde} El script se ha actualizado.${borra_colores}"
    #sleep 2
    exit
fi
}

actualizar_script

if [ $(which ifconfig) ]; then
    echo ""
else
    zenity --question --title="MegaTools ( Diseñado por SUKIGSX )" --text="Se necesita el paquete net-tools. ¿ Quieres instalarlo ?" --cancel-label="No" --ok-label="Si" --width=300
    if [ $? -eq 1 ]; then
        exit 0
    fi

    # Inicializar el contador de intentos
    attempts=0

    # Bucle para solicitar la contraseña hasta tres intentos
    while [ $attempts -lt 3 ]; do
        # Solicitar la contraseña del usuario actual utilizando Zenity
        PASSWORD=$(zenity --password --text="Ingrese su contraseña") --title="MegaTools ( Diseñado por SUKIGSX )"

        # Verificar si se ha cancelado la entrada de la contraseña
        if [ $? -ne 0 ]; then
            # Salir del script si se ha cancelado
            exit
        fi

        # Verificar la contraseña utilizando el comando sudo
        echo "$PASSWORD" | sudo -S ls /root >/dev/null 2>&1

        # Verificar el código de salida del comando sudo
        if [ $? -eq 0 ]; then
            # Contraseña correcta
            zenity --info --title="Contraseña Correcta" --text="La contraseña es correcta."
            exit
        else
            # Contraseña incorrecta
            let "attempts+=1"
            if [ $attempts -lt 3 ]; then
                zenity --error --title="" --text="La contraseña es incorrecta. Inténtelo de nuevo."
            else
                zenity --error --title="Contraseña Incorrecta" --text="Se han superado los tres intentos. Saliendo del script."
                exit
            fi
        fi
    done




    sudo apt install net-tools | zenity --text-info --title="instalando - MegaTools" --width=350 --height=200 --cancel-label="Salir sin preguntar" --ok-label="Atras" --width=650
fi

echo -e "Comando: ifconfig -s\n" > /tmp/InfoDispositivosDeRed; ifconfig -s >> /tmp/InfoDispositivosDeRed; echo -e "\nInformacion de dispositivos de red finalizado." >> /tmp/InfoDispositivosDeRed

while :
do
# Mostrar la salida en una ventana con Zenity
opcion=$(zenity --text-info --filename=/tmp/InfoDispositivosDeRed --title="Informacion de dispositivos de red - MegaTools" --ok-label="Atras" --cancel-label="Salir sin preguntar" --extra-button="Mas detalles" --extra-button="Menos detalles" --font="DejaVu Sans Mono" --width=800 --height=450)

    case $opcion in

        "Mas detalles")
            #Nombre del archivo donde se guardará la salida de ethtool
            output_file="/tmp/InfoDispositivosDeRed"

            #Limpiar el archivo de salida si ya existe
            > "$output_file"

            #Obtener una lista de todas las interfaces de red
            interfaces=$(ls /sys/class/net/)

            #Recorrer cada interfaz y ejecutar ethtool sobre ellas
            for interface in $interfaces; do
                echo "Informacion de la Tarjeta de red : $interface" >> "$output_file"
                ethtool "$interface" >> "$output_file" 2>/dev/null
                echo "" >> "$output_file"
                echo "Fin de la informacion de la tarjeta de red $interface" >> "$output_file"
                echo "" >> "$output_file"
            done
            ;;

        "Menos detalles")
            echo -e "Comando: ifconfig -s\n" > /tmp/InfoDispositivosDeRed; ifconfig -s >> /tmp/InfoDispositivosDeRed; echo -e "\nInformacion de dispositivos de red finalizado." >> /tmp/InfoDispositivosDeRed
            ;;

        *)
            if [ $? = "1" ]; then
                # Leer el PID del archivo para matar el script pricipal
                uno_pid=$(</tmp/ProcesoPidDeMegatools)

                # Matar el proceso de uno.sh
                kill $uno_pid
                rm /tmp/ProcesoPidDeMegatools
                rm /tmp/InfoDispositivosDeRed
                exit
            else
                rm /tmp/ProcesoPidDeMegatools
                rm /tmp/InfoDispositivosDeRed
                exit
            fi
        ;;
    esac
done























# Nombre del archivo donde se guardará la salida de ethtool
#output_file="ethtool_info.txt"

# Limpiar el archivo de salida si ya existe
#> "$output_file"

# Obtener una lista de todas las interfaces de red
#interfaces=$(ls /sys/class/net/)

# Recorrer cada interfaz y ejecutar ethtool sobre ellas
#for interface in $interfaces; do
#    echo "Informacion de la Tarjeta de red : $interface" >> "$output_file"
#    ethtool "$interface" >> "$output_file"
#    echo "" >> "$output_file"
#    echo "Fin de la informacion de la tarjeta de red $interface" >> "$output_file"
#    echo "" >> "$output_file"
#done

#echo "Información de ethtool guardada en $output_file"
